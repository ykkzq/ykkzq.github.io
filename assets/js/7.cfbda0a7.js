(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{327:function(n,e,t){"use strict";t.r(e);var r=t(33),o=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("在常规的前端项目中，部署项目需要经过本地 build，压缩文件，将压缩包上传至服务器并解压文件等步骤，过程较为繁琐。所以在日常工作中就编写了一套自动化部署流程，用来告别手动上传的过程，配置使用简单，实现前端一键自动化部署。")]),n._v(" "),t("p",[t("strong",[n._v("首先咱们来理清整个过程：")])]),n._v(" "),t("p",[t("code",[n._v("1. 代码上传到gitlab，Jenkins检测到gitlab上代码有变化，将代码下载到自己的工作空间。")])]),n._v(" "),t("p",[t("code",[n._v("2. 代码下载之后，Jenkins自动下载项目所需要的依赖文件。")])]),n._v(" "),t("p",[t("code",[n._v("3. 执行package.json文件里的自定义打包命令，将打包好的文件压缩成zip文件放入linux服务器中指定的路径下。")])]),n._v(" "),t("p",[t("code",[n._v("4. 部署成功，访问根据nginx发布的项目地址测试是否成功。")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50d5708bfd18463793e3de4800c268b4~tplv-k3u1fbpfcp-watermark.image",alt:"68C41962-F527-421b-881B-4C581315D708.png"}})]),n._v(" "),t("p",[n._v("接下来就是进行环境搭建。")]),n._v(" "),t("h2",{attrs:{id:"安装-jenkins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-jenkins"}},[n._v("#")]),n._v(" 安装 jenkins")]),n._v(" "),t("p",[n._v("下载 Jenkins epel 源")]),n._v(" "),t("p",[t("code",[n._v("wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo")])]),n._v(" "),t("p",[n._v("然后执行 "),t("code",[n._v("rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key")])]),n._v(" "),t("p",[n._v("Jenkins 运行依赖 Java 环境，需要提前配置好")]),n._v(" "),t("p",[n._v("查看 java 版本信息 "),t("code",[n._v("java -version")])]),n._v(" "),t("p",[n._v("初始化 jenkins "),t("code",[n._v("yum install jenkins -y")])]),n._v(" "),t("p",[n._v("查找 java 程序的执行路径 "),t("code",[n._v("which java")])]),n._v(" "),t("p",[n._v("在 Jenkins 启动脚本添加我们的 Java 命令路径，如果在脚本的默认路径中请忽略此步骤")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d1a6086b8ab44619f6d584ba2f2819c~tplv-k3u1fbpfcp-watermark.image",alt:"911490-20190215134549962-119504242.png"}})]),n._v(" "),t("p",[n._v("然后执行"),t("code",[n._v("chown -R jenkins:jenkins /var/lib/jenkins/")])]),n._v(" "),t("p",[n._v("加载 jenkins 服务"),t("code",[n._v("systemctl daemon-reload")])]),n._v(" "),t("p",[n._v("执行"),t("code",[n._v("vim /var/lib/jenkins/hudson.model.UpdateCenter.xml")]),n._v("，由于较早版本中在 Jenkins 运行前按照 plugin 时可能会出现问题，将 https 修改为 http，如果没有这个文件则先启动 Jenkins，启动后如果出现问题可以打开http://IP:8080/pluginManager/advanced连接修改")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/387802a2e6734790bbba2e6a067fa60c~tplv-k3u1fbpfcp-watermark.image",alt:"911490-20190215134717350-1584103592.png"}})]),n._v(" "),t("p",[n._v("启动服务 "),t("code",[n._v("service jenkins start")])]),n._v(" "),t("p",[n._v("检查端口是否启动，默认 8080 "),t("code",[n._v("netstat -tnlp")])]),n._v(" "),t("p",[n._v("判断 jenkins 是否下载成功并且运行正常 "),t("code",[n._v("service jenkins status")])]),n._v(" "),t("p",[n._v("这时候我们可以通过访问服务器的 8080 端口来进入 jenkins 的页面，如果打不开可以查看 8080 端口是否开放。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2060aedb43404976aee1fccbc00e2237~tplv-k3u1fbpfcp-watermark.image",alt:"A82379E5-764C-4f22-9AE1-351C0CDF50AC.png"}})]),n._v(" "),t("p",[n._v("然后根据 jenkins 的引导进行初始化的工作：")]),n._v(" "),t("ol",[t("li",[n._v("根据提示获取管理员的密码然后输入 jenkins 生成的密码。")]),n._v(" "),t("li",[n._v("配置插件。")]),n._v(" "),t("li",[n._v("创建用户。")])]),n._v(" "),t("h2",{attrs:{id:"编写-nodessh-脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写-nodessh-脚本"}},[n._v("#")]),n._v(" 编写 nodessh 脚本")]),n._v(" "),t("p",[n._v("在项目根目录创建名为 buildssh 的目录，并在目录内创建 nodessh.js 文件，内容如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const commander = require("commander");\nconst fs = require("fs");\nconst node_ssh = require("node-ssh");\nconst archiver = require("archiver");\nconst ssh = new node_ssh();\n\ncommander\n  .version("0.1.0")\n  .option("--zip_dir [value]", "subproject dir")\n  .option("--zip", "need zip")\n  .option("--dist [value]", "upload file name , contain surfix")\n  .option("--service [value]", "gitbooks\'s name, folder in nginx")\n  .option("--env_mode [value]", "env mode")\n  .option("--remote_host [value]", "remote_host")\n  .option("--remote_user [value]", "remote_user")\n  .option("--remote_pwd [value]", "remote_pwd")\n  .option("--service_root [value]", "service_root")\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  commander.outputHelp();\n  return;\n}\n\nif (!commander.zip_dir || !commander.dist || !commander.service) {\n  commander.outputHelp();\n  return;\n}\n\nlet remote_host;\nlet remote_user;\nlet remote_pwd;\nlet service_root;\n\nlet cwd = process.cwd();\nlet dist_zip = `${commander.dist}`;\nlet local_zip = `${cwd}/${dist_zip}`;\n\nlet service_dir = `${commander.service}`;\n\nif (commander.env_mode === "test") {\n  //测试环境\n  remote_host = "xxx.xxx.xxx.xxx"; //服务器ip\n  remote_user = "xxxx"; //用户名\n  remote_pwd = "xxx";  //密码\n  service_root = "/usr/share/nginx/html/xxx/"; //文件存放路径(也是nginx代理的前端路径)\n} else if (commander.env_mode === "prod") {\n  //正式环境\n  remote_host = "";\n  remote_user = "";\n  remote_pwd = "";\n  service_root = "";\n}\n\nif (fs.existsSync(local_zip)) {\n  fs.unlinkSync(local_zip);\n}\nlet output;\nlet archive;\n// create a file to stream archive data to.\nif (commander.zip) {\n  output = fs.createWriteStream(local_zip);\n  archive = archiver("zip", {\n    // Sets the compression level.\n    zlib: {\n      level: 5\n    }\n  });\n\n  // listen for all archive data to be written\n  // \'close\' event is fired only when a file descriptor is involved\n  output.on("close", function() {\n    console.log(archive.pointer() + " total bytes");\n    console.log(\n      "archiver has been finalized and the output file descriptor has closed."\n    );\n\n    upload();\n  });\n\n  // This event is fired when the data source is drained no matter what was the data source.\n  // It is not part of this library but rather from the NodeJS Stream API.\n  // @see: https://nodejs.org/api/stream.html#stream_event_end\n  output.on("end", function() {\n    console.log("Data has been drained");\n  });\n\n  // good practice to catch warnings (ie stat failures and other non-blocking errors)\n  archive.on("warning", function(err) {\n    if (err.code === "ENOENT") {\n      // log warning\n      console.log(`${JSON.stringify(err)}`);\n    } else {\n      // throw error\n      throw err;\n    }\n  });\n\n  // good practice to catch this error explicitly\n  archive.on("error", function(err) {\n    throw err;\n  });\n\n  // pipe archive data to the file\n  archive.pipe(output);\n\n  // 添加src目录，第二个参数表示在压缩文件中不建立文件夹，散落在root目录\n  archive.directory(`${cwd}/${commander.zip_dir}`, false);\n\n  // 添加src目录，第二个参数表示在压缩文件中建立文件夹的名字\n  // archive.directory(`${cwd}/${commander.zip_dir}`, `${service_dir}`);\n\n  archive.finalize();\n} else {\n  // 不用压缩文件，就上传指定文件\n  upload();\n}\n\nfunction upload() {\n  ssh\n    .connect({\n      host: remote_host,\n      username: remote_user,\n      password: remote_pwd\n    })\n    .then(\n      () => {\n        return ssh\n          .exec(`rm -rf ${service_root}/${service_dir}/*`, [], {\n            cwd: "",\n            onStdout(chunk) {\n              console.log("stdoutChunk", chunk.toString("utf8"));\n            },\n            onStderr(chunk) {\n              console.log("stderrChunk", chunk.toString("utf8"));\n            }\n          })\n          .then(() => {\n            console.log("开始上传文件");\n            return ssh.putFile(local_zip, `${dist_zip}`);\n          })\n          .then(() => {\n            console.log("上传完成，开始解压");\n            return ssh.exec(\n              `unzip -d ${service_root}/${service_dir} ${dist_zip}`,\n              [],\n              {\n                cwd: "",\n                onStdout(chunk) {\n                  console.log("stdoutChunk", chunk.toString("utf8"));\n                },\n                onStderr(chunk) {\n                  console.log("stderrChunk", chunk.toString("utf8"));\n                }\n              }\n            );\n          })\n          .then(() => {\n            console.log("解压完成，删除上传文件");\n            return ssh.exec(`rm -f ${dist_zip}`, [], {\n              cwd: "",\n              onStdout(chunk) {\n                console.log("stdoutChunk", chunk.toString("utf8"));\n              },\n              onStderr(chunk) {\n                console.log("stderrChunk", chunk.toString("utf8"));\n              }\n            });\n          })\n          .then(() => {\n            console.log("全完成");\n            return ssh.dispose();\n          });\n      },\n      error => {\n        console.log("Something\'s wrong");\n        console.log(error);\n      }\n    );\n}\n\n')])])]),t("p",[n._v("然后在 package.json 的 scripts 对象里面添加一条执行命令"),t("code",[n._v('"pubtest": "node buildssh/nodessh.js --zip --zip_dir dist --dist dist.zip --service dist --env_mode test"')])]),n._v(" "),t("h2",{attrs:{id:"配置项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置项目"}},[n._v("#")]),n._v(" 配置项目")]),n._v(" "),t("ol",[t("li",[n._v("登录 jenkins 创建项目")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba76476b2dbf4df489603aac4049bc18~tplv-k3u1fbpfcp-watermark.image",alt:"A82379E5-764C-4f22-9AE1-351C0CDF50AC.png"}})]),n._v(" "),t("p",[n._v("2.配置项目信息")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c73f2ee5bc64ec3afae6007f5ef69a5~tplv-k3u1fbpfcp-watermark.image",alt:"BEC85684-5EB6-4341-985F-952BFEDAABB4.png"}})]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7383d1f81c3247e2b63137f3eb347655~tplv-k3u1fbpfcp-watermark.image",alt:"3B82454C-B5DD-45d5-8D7F-7FBA9C4CEF5B11.png"}})]),n._v(" "),t("p",[n._v("3.选择构建环境")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc2d84c80d084e7f8e27a841ed673e84~tplv-k3u1fbpfcp-watermark.image",alt:"8DCE84FE-1CC8-46ce-8BF1-91E73F260B64222.png"}})]),n._v(" "),t("p",[n._v("4.编写构建命令")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67b564c7e97c45caba2a6855882733fb~tplv-k3u1fbpfcp-watermark.image",alt:"418EB611-29DC-40f9-9978-FF2E51BC6A5B333.png"}})]),n._v(" "),t("p",[n._v("5.点击保存和运用，进入项目首页点击立即构建，构建完成之后即可测试。")])])}),[],!1,null,null,null);e.default=o.exports}}]);